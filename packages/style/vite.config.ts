import { defineConfig } from "vite";
import path from "path";
import fs from 'fs';

// 自定义插件：读取 src/css/components 下的 *.css 生成 ESM 导出
function componentsCssExportPlugin() {
        return {
            name: 'nordstjerna-components-css-export',
            apply(config, env){ return env.command === 'build'; },
            generateBundle() {
                const dir = path.resolve(__dirname, 'src/css/components');
                if (!fs.existsSync(dir)) return;
                const files = fs.readdirSync(dir).filter(f => f.endsWith('.css'));
                const lines: string[] = [];
                for (const f of files) {
                    const content = fs.readFileSync(path.join(dir, f), 'utf8').replace(/`/g, '\\`');
                    const base = f.replace(/\.css$/, '');
                    lines.push(`export const ${camel(base)}Css = \`${content}\`;`);
                }
                const code = `// Auto-generated by componentsCssExportPlugin\n${lines.join('\n')}\n`;
                this.emitFile({ type: 'asset', fileName: 'components-css.js', source: code });
                this.emitFile({ type: 'asset', fileName: 'components-css.d.ts', source: lines.map(l=>{
                    const match = l.match(/export const (\w+)Css/); return match?`export const ${match[1]}Css: string;`:'';
                }).join('\n') + '\n' });
            }
    };
}

function camel(name: string){
    return name.replace(/-([a-z])/g, (_,c)=>c.toUpperCase());
}

export default defineConfig({
    build: {
        // lib: {
        //     entry: path.resolve(__dirname, "src/main.ts"),
        //     name: "Nordstjerna",
        //     fileName: (format) => `nordstjerna.${format}.js`,
        // },
        outDir: 'dist',
        emptyOutDir: true,
        // 添加CSS输出配置
        cssCodeSplit: false,
        rollupOptions: {
            input: path.resolve(__dirname, "src/main.ts"),
            output: {
                assetFileNames: 'style.css'
            }
        }
    },
    plugins: [componentsCssExportPlugin()]
});